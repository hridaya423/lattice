import { saveAs } from 'file-saver';
import { Message } from '../../types';

interface ExportData {
  scenario: string;
  messages: Message[];
  timestamp: Date;
}


const parseAnalysisContent = (content: string) => {
  const summaryMatch = content.match(/SUMMARY:\s*([\s\S]*?)(?=DETAILED ANALYSIS:|$)/);
  const detailedMatch = content.match(/DETAILED ANALYSIS:\s*([\s\S]*)/);
  
  return {
    summary: summaryMatch ? summaryMatch[1].trim() : '',
    detailed: detailedMatch ? detailedMatch[1].trim() : content
  };
};


export const exportToMarkdown = (data: ExportData) => {
  const { scenario, messages, timestamp } = data;
  
  let markdown = `# AI Ethics Analysis\n\n`;
  markdown += `**Generated on:** ${timestamp.toLocaleDateString()} at ${timestamp.toLocaleTimeString()}\n\n`;
  markdown += `## Scenario\n\n${scenario}\n\n`;
  
  
  messages.forEach((message, index) => {
    if (message.role === 'assistant') {
      if (index === 0) {
        
        const parsed = parseAnalysisContent(message.content);
        
        if (parsed.summary) {
          markdown += `## Executive Summary\n\n${parsed.summary}\n\n`;
        }
        
        if (parsed.detailed) {
          markdown += `## Detailed Analysis\n\n${parsed.detailed}\n\n`;
        }
      } else {
        
        markdown += `### AI Response ${index}\n\n${message.content}\n\n`;
      }
    } else if (message.role === 'user') {
      markdown += `### Follow-up Question\n\n${message.content}\n\n`;
    }
    
    markdown += `*Generated at ${message.timestamp.toLocaleTimeString()}*\n\n---\n\n`;
  });
  
  markdown += `\n\n*Analysis generated by AI Ethics Analyzer*`;
  
  
  const blob = new Blob([markdown], { type: 'text/markdown;charset=utf-8' });
  const fileName = `ethics-analysis-${timestamp.getTime()}.md`;
  saveAs(blob, fileName);
};


export const exportToPDF = async (data: ExportData) => {
  
  if (typeof window === 'undefined') {
    throw new Error('PDF export is only available on the client side');
  }

  
  const html2pdf = (await import('html2pdf.js')).default;
  
  const { scenario, messages, timestamp } = data;
  
  
  let htmlContent = `
    <div style="font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px;">
      <div style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #2563eb; padding-bottom: 20px;">
        <h1 style="color: #2563eb; margin-bottom: 10px;">AI Ethics Analysis</h1>
        <p style="color: #666; margin: 0;">Generated on ${timestamp.toLocaleDateString()} at ${timestamp.toLocaleTimeString()}</p>
      </div>
      
      <div style="margin-bottom: 30px;">
        <h2 style="color: #1e293b; border-left: 4px solid #2563eb; padding-left: 15px; margin-bottom: 15px;">Scenario</h2>
        <div style="background: #f8fafc; padding: 20px; border-radius: 8px; border-left: 3px solid #2563eb;">
          ${scenario.replace(/\n/g, '<br>')}
        </div>
      </div>
  `;
  
  
  messages.forEach((message, index) => {
    if (message.role === 'assistant') {
      if (index === 0) {
        
        const parsed = parseAnalysisContent(message.content);
        
        if (parsed.summary) {
          htmlContent += `
            <div style="margin-bottom: 25px;">
              <h2 style="color: #1e293b; border-left: 4px solid #10b981; padding-left: 15px; margin-bottom: 15px;">Executive Summary</h2>
              <div style="background: #f0fdf4; padding: 20px; border-radius: 8px; border-left: 3px solid #10b981;">
                ${parsed.summary.replace(/\n/g, '<br>')}
              </div>
            </div>
          `;
        }
        
        if (parsed.detailed) {
          htmlContent += `
            <div style="margin-bottom: 25px;">
              <h2 style="color: #1e293b; border-left: 4px solid #7c3aed; padding-left: 15px; margin-bottom: 15px;">Detailed Analysis</h2>
              <div style="background: #faf5ff; padding: 20px; border-radius: 8px; border-left: 3px solid #7c3aed; white-space: pre-wrap;">
                ${parsed.detailed.replace(/\n/g, '<br>')}
              </div>
            </div>
          `;
        }
      } else {
        htmlContent += `
          <div style="margin-bottom: 25px;">
            <h3 style="color: #1e293b; border-left: 4px solid #f59e0b; padding-left: 15px; margin-bottom: 15px;">AI Response</h3>
            <div style="background: #fffbeb; padding: 20px; border-radius: 8px; border-left: 3px solid #f59e0b;">
              ${message.content.replace(/\n/g, '<br>')}
            </div>
            <p style="color: #666; font-size: 12px; margin-top: 10px; text-align: right;">
              Generated at ${message.timestamp.toLocaleTimeString()}
            </p>
          </div>
        `;
      }
    } else if (message.role === 'user') {
      htmlContent += `
        <div style="margin-bottom: 25px;">
          <h3 style="color: #1e293b; border-left: 4px solid #06b6d4; padding-left: 15px; margin-bottom: 15px;">Follow-up Question</h3>
          <div style="background: #ecfeff; padding: 20px; border-radius: 8px; border-left: 3px solid #06b6d4;">
            ${message.content.replace(/\n/g, '<br>')}
          </div>
          <p style="color: #666; font-size: 12px; margin-top: 10px; text-align: right;">
            Asked at ${message.timestamp.toLocaleTimeString()}
          </p>
        </div>
      `;
    }
  });
  
  htmlContent += `
      <div style="margin-top: 40px; text-align: center; border-top: 1px solid #e2e8f0; padding-top: 20px;">
        <p style="color: #666; font-size: 12px; margin: 0;">Analysis generated by AI Ethics Analyzer</p>
      </div>
    </div>
  `;
  
  
  const options = {
    margin: [20, 15, 20, 15],
    filename: `ethics-analysis-${timestamp.getTime()}.pdf`,
    image: { type: 'jpeg', quality: 0.98 },
    html2canvas: { 
      scale: 2,
      useCORS: true,
      letterRendering: true
    },
    jsPDF: { 
      unit: 'mm', 
      format: 'a4', 
      orientation: 'portrait',
      compress: true
    }
  };
  
  
  try {
    await html2pdf().from(htmlContent).set(options).save();
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF. Please try again.');
  }
}; 